#lang racket
(define size 2)
(define (square x) (* x x))
(define (sum-of-square x y) (+ (square x) (square y)))
(define (sum-max-squares x y z)
  (cond ((>= x y)
         (if (> z y) (sum-of-square x z) (sum-of-square x y)))
        ((>= y z)
         (if (> z x) (sum-of-square z y) (sum-of-square y x)))
        (else
         (if (> x y) (sum-of-square z x) (sum-of-square z y)))))
(define (p) (p))      
     